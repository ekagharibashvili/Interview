// 1. Data types

// Dynamic typing
// ჯავასკრიპტი არის თავისუფლად ტიპიზირებადი ენა ანუ ჩვენ რომელიმე ცვლადის შექმნისას არ გვჭირდება მივუთითოთ რა ტიპისაა ის(სტრინგი, ნამბერი და ა.
// ასევე შეგვიძლია ნამბერ ტიპის ცვლად გადავაქციოთ სტრინგად თავიდან გატოლების შედეგად.

let foo = 42;    // foo is now a number
foo     = 'bar'; // foo is now a string
foo     = true;  // foo is now a boolean

// Javascript Types
// ჯავასკრიპტში ტიპი შეიძლება იყოს პრიმიტიული ან ობიექტი.
// პრიმიტიული ტიპი არის სინგლ ველიუ ხოლო ობიექტი შეიძlება შეიცავდეს ფროფერთიების და ველიუების კოლექციას.
// პირიმიტიული ტიპებია: string, number, boolean, bigint, symbol, null და undefined.

// Primitive values
// ყველა ტიპი ობიექტის გარდა არამუტაციურია (ანუ არ შეგვიძლია ველიუს შეცვლა). მაგალითად სტრინგი არა მუტაცურია. და მისი ტიპის მნიშვნელობა 
// იგულისხმება როგორც პრიმიტიული.

// Boolean  - ლოგიკური ოპერატორია და წარმოდგენია true და false-ით
// null - ამ ტიპს აქვს ერთადერთი ველიუ null
// undefined - ცვლადი რომელსაც მნიშვნელობა არ აქვს მინიჭებული არის ანდეფაინდი.
// Number type - ის არის 64 ბიტიანი ფორმატის და შეიძლება ჰქონდეს ნებისმიერი მნიშვნელობა მინუს უსარულობიდან პლიუს უსასრულობამდე და ასევე NaN
// NaN(Not a Number)
// Bigint - გამოიყენება დიდ რიცხვებთან სამუშაოდ, დაცულად ინახავს რიცხვებს. bigint იქმნება რიცხვის ბოლოში n-ის დამატებით ან კონსტრუქტორის გამოძახებით
const x = 2n ** 53n;
9007199254740992n
const y = x + 1n;
9007199254740993n
// bigint is loosely equal to number but not a strict
// string - ტიპი გამოიყენება ტექსტური ინფორმაციის შესანახად. სტრინგის ყველა ელემენტს აქვს საკუთარი ინდექსი. 
// Symbol- აქვს უნიკალური ველიუ, არამუტაციური, ის გამოიყენება key ფროფერთით ობიექტში.  ზოგიერთ პროგრამულ ენაში მას უწოდებენ ატომს.
// სიმბოლოს მნიშვნელობა იქმნება symბოლ ფუნქციის გამოძახებით.
let Sym1 = Symbol("Sym")
let Sym2 = Symbol("Sym")

console.log(Sym1 === Sym2) // returns "false"

// სიმბოლო ავტომატურად არ კონვერტირდება სტრინგში.
let Sym = Symbol("Sym")
alert(Sym)  // TypeError: Cannot convert a Symbol value to a string

// სოლუშენი იქნება:
let Sym = Symbol("Sym")
alert(Sym.toString())  // Symbol(Sym), now it works
// ან
let _Sym = Symbol("Sym");

alert(_Sym.description); // Sym

// Object
// oობიექტი არის მეხსიერების მნიშვნელობა, რომელიც მითითებულია იდენთიფიკატორით.

// properties
// ობიექტები შეიძლება წარმოდგენილი იყოს ფროფერთიების კოლექციით. ფროფერთიები შეიძლება წაიშალოს ან დაემატოს ობიექტში. ფროფერთი წარმოდგენილია key value წყვილით.
// Key შიძლება იყოს სტრინგ ტიპი ან სიმბოლო, ხოლო ველიუ კი ნებისმიერი ტიპი.